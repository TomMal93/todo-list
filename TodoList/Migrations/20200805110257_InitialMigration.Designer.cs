// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TodoList.Domain;

namespace TodoList.Migrations
{
    [DbContext(typeof(ToDoListContext))]
    [Migration("20200805110257_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TodoList.Domain.ToDoTask", b =>
                {
                    b.Property<Guid>("ToDoTaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int>("PriorityStatus")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("ToDoTaskID");

                    b.ToTable("ToDoTasks");

                    b.HasData(
                        new
                        {
                            ToDoTaskID = new Guid("b2d0cb27-8328-4e9b-8d61-49a1853230bc"),
                            Description = "Makaron, mięso",
                            FinishDate = new DateTime(2020, 8, 5, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDone = false,
                            PriorityStatus = 2,
                            Title = "Zakupy"
                        },
                        new
                        {
                            ToDoTaskID = new Guid("9e65e8a5-9f00-45a2-9983-f5fdc50b1792"),
                            Description = "",
                            FinishDate = new DateTime(2020, 8, 6, 13, 2, 46, 347, DateTimeKind.Local).AddTicks(7068),
                            IsDone = false,
                            PriorityStatus = 1,
                            Title = "Zrobić pranie"
                        },
                        new
                        {
                            ToDoTaskID = new Guid("886332ad-7ff2-49c2-8e75-6193541caff7"),
                            Description = "Spaghetti",
                            FinishDate = new DateTime(2020, 8, 5, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDone = false,
                            PriorityStatus = 2,
                            Title = "Zrobić kolację"
                        },
                        new
                        {
                            ToDoTaskID = new Guid("ee648776-6b7f-448b-be16-a3d366ab3b7b"),
                            Description = "",
                            FinishDate = new DateTime(2020, 8, 5, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDone = true,
                            PriorityStatus = 2,
                            Title = "Odebrać dzieci ze szkoły"
                        },
                        new
                        {
                            ToDoTaskID = new Guid("a9ededa6-5e35-440b-b615-f0d97e6063f3"),
                            Description = "Czas dla rodziny",
                            FinishDate = new DateTime(2020, 8, 7, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDone = false,
                            PriorityStatus = 0,
                            Title = "Zaplanować weekend"
                        },
                        new
                        {
                            ToDoTaskID = new Guid("6a4f78d2-6786-4749-b5d9-9423a9f871cc"),
                            Description = "",
                            FinishDate = new DateTime(2020, 8, 6, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDone = false,
                            PriorityStatus = 1,
                            Title = "Trening"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
